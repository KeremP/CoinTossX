plugins {
    id 'org.hidetake.ssh' version '1.1.3'
}

ext{
    env = 'local'
    envProp = ''
    softwarePath = ''
}

if(ext.env == 'local'){
    apply from: 'deploy_local.gradle'
} else if(ext.env == 'wits'){
    apply from: 'deploy.gradle'
} else if(ext.env == 'chpc') {
    apply from: 'deploy_chpc.gradle'
} else if(ext.env == 'azure') {
    apply from: 'deploy_azure.gradle'
}

loadConfiguration()

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
    version = '1.0'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.+'
    }
}

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'local'
    println "Environment is set to $environment"

    def configFile = file('profiles.groovy')
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    project.envProp = config.ext.envProp
    project.softwarePath = config.ext.softwarePath

    println project.envProp
    println project.softwarePath
}


task cleanDeploy() {
    doLast{
        File deploy = new File(rootProject.projectDir.absolutePath + '/deploy')
        if (deploy.exists()) {
            delete deploy
        }

        deploy.mkdirs()
    }
}

task copyScriptsToDeploy() {
    doLast{
        File scripts = new File(rootProject.projectDir.absolutePath + '/deploy/scripts')
        if(scripts.exists()){
            scripts.delete()
        }

        scripts.mkdirs()

        copy {
            from rootProject.projectDir.absolutePath + '/scripts'
            into rootProject.projectDir.absolutePath + '/deploy/scripts'

            def myProps = new Properties()
            file(rootProject.projectDir.absolutePath + '/' + project.envProp).withInputStream {
                myProps.load(it);
            }
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: myProps)
        }
    }
}

task copyWebToDeploy() {
    doLast{
        File web = new File(rootProject.projectDir.absolutePath + '/deploy/Web')
        if(web.exists()){
            web.delete()
        }

        web.mkdirs()

        copy {
            from project(':Web').buildDir.absolutePath + '/libs'
            into rootProject.projectDir.absolutePath + '/deploy/Web'
        }
    }
}

task copyToDeploy() {
    doLast{
        project.subprojects.each { proj ->
            copy{
                from proj.buildDir.absolutePath + '/install/'
                into 'deploy'
            }
        }
    }
}

copyToDeploy.dependsOn cleanDeploy
copyToDeploy.dependsOn copyScriptsToDeploy
copyToDeploy.dependsOn copyWebToDeploy




